function [L,hits,hitsAnother] = ADABOOST_te(adaboost_model,te_func_handle,test_set,true_labels)
%
% ADABOOST TESTING
%
%   [L,hits] = ADABOOST_te(adaboost_model,te_func_handle,train_set,
%                          true_labels)
%
%            'te_func_handle' is a handle to the testing function of a
%            learning (weak) algorithm whose prototype is shown below.
%
%            [L,hits,error_rate] = test_func(model,test_set,sample_weights,true_labels)
%                     model: the output of train_func
%                     test_set: a KxD dimensional matrix, each of whose row is a
%                         testing sample in a D dimensional feature space.
%                     sample_weights:   a Dx1 dimensional vector, the i-th entry
%                         of which denotes the weight of the i-th sample.
%                     true_labels: a Dx1 dimensional vector, the i-th entry of which

%                         is the label of the i-th sample.
%                     L: a Dx1-array with the predicted labels of the samples.
%                     hits: number of hits, calculated with the comparison of L and
%                         true_labels.
%                     error_rate: number of misses divided by the number of samples.
%
%            It is the corresponding testing
%            module of the function that is specified in the training phase.
%            'test_set' is a NxD matrix where N is the number of samples
%            in the test set and D is the dimension of the feature space.
%            'true_labels' is a Nx1 matrix specifying the class label of
%            each corresponding sample's features (each row) in 'test_set'.
%            'adaboost_model' is the model that is generated by the function
%            'ADABOOST_tr'.
%
%            'L' is the likelihoods that are assigned by the 'ADABOOST_te'.
%            'hits' is the number of correctly predicted labels.
%
%         Specific Properties That Must Be Satisfied by The Function pointed
%         by 'func_handle'
%         ------------------------------------------------------------------
%
% Notice: Labels must be positive integer values from 1 upto the number classes.
%
% Bug Reporting: Please contact the author for bug reporting and comments.
%
% Cuneyt Mertayak
% email: cuneyt.mertayak@gmail.com
% version: 1.0
% date: 21/05/2007
%

hypothesis_n = length(adaboost_model.weights);
sample_n = size(test_set,1);
% class_n = length(unique(true_labels))
class_n=14;
temp_L = zeros(sample_n,hypothesis_n);   % likelihoods for each weak classifier

% for each weak classifier, likelihoods of test samples are collected
sprintf('every model error');
for i=1:hypothesis_n
    [temp_L(:,i),hits,error_rate] = te_func_handle(adaboost_model.parameters{i},test_set,true_labels,adaboost_model.model_name{i});
%     error_rate
%     temp_L(:,i) = temp_L(:,i)*adaboost_model.weights(i);
end
% L = sum(temp_L,2);
% L=round(L);
[probability]=dynamicGetLearnWigth(adaboost_model,te_func_handle,5,test_set);
for i = 1:sample_n %归一化
    probability(i,:)=probability(i,:)/norm(probability(i,:));
end
%查看测试样本在各个分类器错分情况
% sprintf('*****错分情况********')
% for i=1:hypothesis_n
%     disp([num2str(i),' 分类器错分情况：'])
%     for j=1:sample_n
%         if temp_L(j,i)~=true_labels(j)
%             str=[num2str(j) ' class label:' num2str(true_labels(j)) ];
%             disp(str);
%         end
%     end
% end
% sprintf('*****错分情况********')
%投票法决定样本属于哪一类
for i=1:sample_n
    p=zeros(1,class_n);
    p1=zeros(1,class_n);
    for j=1:hypothesis_n
        p(temp_L(i,j))=p(temp_L(i,j))+adaboost_model.weights(j);
%         p1(temp_L(i,j))=p1(temp_L(i,j))+probability(i,j);%动态分配权重
    end
    index=find(p==max(p));
%     index1=find(p1==max(p1));
    if length(index)>=2 
        sprintf('出现多个分类器判定权重之和最大值相等的情况')
        L(i)=index(1);
%         L1(i)=index1(1);
    else
        L(i)=index;
%         L1(i)=index1;
    end   
end
hits = sum(L'==true_labels);
% hitsAnother=sum(L1'==true_labels);
hitsAnother=hits;